"""Module for line profile least squares fitting"""
import numpy as np
from scipy.constants import speed_of_light

from trident.absorption_spectrum.absorption_line import voigt

SPEED_LIGHT = speed_of_light / 1000.0 # km/s


class LineProfileLeastSquares:
    """This class deals with the line profile fitting.

    It is passed to iminuit and when called it will return the chi2 for a given
    set of parameters

    Methods
    -------
    __init__
    __call__
    compute_line_profile

    Attributes
    ----------
    flux: array
    The flux array

    flux_fit: array
    Current flux fit including the profile of previously fitted lines

    species_dict: dict
    Dictionary containing all relevant parameters needed to create an
    absorption line of a given species (f, Gamma, lambda0)

    wavelength: array
    Wavelength array
    """
    def __init__(self, wavelength, flux, flux_fit, species_dict):
        """Initialize class instance

        Arguments
        ---------
        wavelength: array
        Wavelength array

        flux: array
        The flux array

        flux_fit: array
        Current flux fit including information from previous lines.
        New lines will be added to this

        species_dict: dict
        Dictionary containing all relevant parameters needed to create an
        absorption line of a given species (f, Gamma, lambda0)
        """
        self.flux = flux
        self.flux_fit = flux_fit
        self.species_dict = species_dict
        self.wavelength = wavelength

    def __call__(self, column_density, impact_parameter, redshift):
        """Compute the chi2 of the fit

        Arguments
        ---------
        column_density: float
        The gas column density

        impact_parameter: float
        The absoprtion impact parameter

        redsfhit: float
        The absorption redshift

        Return
        ------
        chi2: float
        The chi2 of this run
        """
        # TODO: add ivar dependence
        chi2_contribution = self.compute_line_profile(
            column_density, impact_parameter, redshift) - self.flux
        return np.sum(chi2_contribution**2)

    def compute_line_profile(self, column_density, impact_parameter, redshift):
        """Calculate the normalized flux for a region of wavelength
        space generated by a set of absorption lines.

        Takes into account the profiles of the lines previously fitted

        Arguments
        ---------
        column_density: float
        The gas column density

        impact_parameter: float
        The absoprtion impact parameter

        redsfhit: float
        The absorption redshift

        Return
        ------
        flux: array
        The predicted flux array
        """
        tau = np.zeros_like(self.wavelength)

        for oscillator_strength, gamma, line_wavelength in zip(
            self.species_dict['f'],
            self.species_dict['Gamma'],
            self.species_dict['wavelength']):
                tau += gen_tau(
                    self.wavelength,
                    column_density,
                    impact_parameter,
                    redshift,
                    oscillator_strength,
                    gamma,
                    line_wavelength)

        flux = self.flux_fit * np.exp(-tau)
        #flux = np.exp(-tau)
        return flux

def gen_tau(wavelength, column_density, impact_parameter, redshift,
            oscillator_strength, gamma, line_wavelength):
    """This calculates a flux distribution for given parameters using the yt
    voigt profile generator"""
    tau_o = (1.4973614E-15 * column_density * oscillator_strength *
             line_wavelength / impact_parameter)
    a = 7.95774715459E-15 * gamma * line_wavelength / impact_parameter
    x = SPEED_LIGHT / impact_parameter * (
        line_wavelength * (1 + redshift) / wavelength - 1)

    H = voigt(a, x)

    tau = tau_o * H

    return tau
